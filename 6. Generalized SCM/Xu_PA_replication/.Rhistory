rm(list=ls(all=TRUE)) ## eliminating everything in the memory; be cautious
library(gsynth)
data(gsynth)
## Column 1 (DID)
out.did1<-interFE(turnout ~ policy_edr,
data = turnout, index = c("abb", "year"),
r = 0, force="two-way", SE = TRUE, nboots = 2000,
seed = 2139)
## Column 2 (DID)
out.did2<-interFE(turnout ~ policy_edr + policy_mail_in + policy_motor,
data = turnout, index = c("abb", "year"),
r = 0, force="two-way", SE = TRUE, nboots = 2000,
seed = 2139)
## Column 3 (GSC)
out.syn1<-gsynth(turnout ~ policy_edr,
data = turnout, index =c("abb", "year"),
force = "two-way", CV = TRUE, r=c(0,5), se = TRUE,
parallel = FALSE, nboots=2000, seed = 2139)
## Column 4 (GSC)
out.syn2<-gsynth(turnout ~ policy_edr + policy_mail_in + policy_motor,
data = turnout, index =c("abb", "year"),
force = "two-way", CV = TRUE, r=c(0,5), se = TRUE,
parallel = FALSE, nboots=2000, seed = 2139)
## first look (not in the paper)
plot(out.syn2, type = "gap", xlim = c(-13,4))
plot(out.syn2, type = "raw")
plot(out.syn2, type = "counterfactual")
plot(out.syn2, type = "factors")
plot(out.syn2, type = "loadings")
## DID (dynamic effect)
out.did3<-gsynth(turnout ~ policy_edr + policy_mail_in + policy_motor,
data = turnout, index =c("abb", "year"),
force = "two-way", CV = FALSE, r = 0, se = TRUE,
parallel = FALSE, nboots=2000,
inference = "nonparametric", seed = 2139)
plot(out.did3, type = "gap", xlim = c(-13,4))
plot(out.did3, type = "counterfactual")
rm(list=ls(all=TRUE)) ## eliminating everything in the memory; be cautious
library(gsynth)
data(gsynth)
View(simdata)
write.csv(simdata, 'simdata.csv')
?write.csv
write.csv(simdata, 'simdata.csv', row.names = FALSE)
write.csv(simdata, 'simdata.csv', row.names = FALSE)
rm(list=ls(all=TRUE)) ## eliminating everything in the memory; be cautious
library(gsynth)
data(gsynth)
rm(list=ls(all=TRUE)) ## clear memeory; be cautious!
## load package and data
library(gsynth)
data(gsynth)
require(parallel)
require(foreach)
require(ggplot2)
require(GGally)
## run the algorithm
system.time(
out <- gsynth(Y ~ D + X1 + X2, data = simdata,
index=c("id","time"), inference="parametric",
se = TRUE, nboots = 1000, r = c(0, 5), CV = TRUE,
force = "two-way", parallel = TRUE, cores = 4)
)
## save the results
Y<-out$Y.dat
tb<-out$est.att
Yb<-out$Y.bar[,1:2] ## treated average and counterfactual average
tr<-out$tr
pre<-out$pre
T<-out$T
T0<-out$T0
p<-out$p
m<-out$m
Ntr<-out$Ntr
F.hat<-out$factor
L.tr<-out$lambda.tr
L.co<-out$lambda.co
time<-out$time
time.bf<-time[unique(T0)]
show <- 1:30
pdf("sim_att.pdf",width=10,height=7)
true.effect<-matrix(simdata$eff,30,50)[,1:5]
par(mfcol=c(2,1),mar=c(2,3,1,1),lend=1)
# raw plot
plot(time[show],Yb[show,1],type="n",ylim=c(-10, 50),main="",ylab="",xlab="")
for (j in which(tr==0)) lines(time[show],Y[show,j], col="#AAAAAA30")
for (j in which(tr==1)) {lines(time[show],Y[show,j],col="gray60",lwd=0.8)}
lines(time[show],Yb[show,2],col="gray20",lty=5,lwd=2.5)
lines(time[show],Yb[show,1],col=1,lty=1,lwd=2.5)
abline(v=time.bf,col="gray50",lty=1,lwd=1)
legend("topleft",legend=c("Treated Average",
"Estimated Y(0) Average for the Treated",
"Treated",
"Control"),
cex=1.3, seg.len=2, col=c("1","gray20","gray60","#AAAAAA60"),
fill=NA,border=NA, lty=c(1,5,1,1), lwd=c(2.5,2.5,2,2), merge=T,bty="n")
## gap plot
par(lend=1)
plot(time[show],tb[show,1],type="n",ylim=c(-2.2,12),main="",ylab="",xlab="")
polygon(c(rev(time[show]),
time[show]),
c(rev(tb[show,4]), tb[show,3]), col = '#80808050', border = NA)
abline(h=0,col="gray50",lty=1)
abline(v=time.bf,col="gray50",lty=1,lwd=1)
lines(time[show],tb[show,1],lwd=2)
lines(1:T,rowMeans(true.effect),col="gray20",lty=5,lwd=2.5)
legend("topleft",
legend=c("Estimated ATT","True ATT","95% Confidence Intervals"),
seg.len=2, cex=1.3, col=c(1,"gray20","#80808050"),
lty=c(1,5, 1),lwd=c(2.5,2.5,15), bty="n",border=NA)
graphics.off()
gap_data <- data.frame(time = time[show], tb1 = tb[show, 1], true_effect = rowMeans(true.effect))
# ggplot
ggplot() +
geom_ribbon(data = gap_data, aes(x = time, ymin = tb3, ymax = tb4), fill = "#80808050", color = NA) +
geom_hline(yintercept = 0, color = "gray50", linetype = "solid") +
geom_vline(xintercept = time.bf, color = "gray50", linetype = "solid", size = 1) +
geom_line(data = gap_data, aes(x = time, y = tb1), color = "black", size = 1.25) +
geom_line(data = gap_data, aes(x = time, y = true_effect), color = "gray20", linetype = "dashed", size = 1.25) +
labs(x = "", y = "", title = "") +
theme_minimal()
View(out)
View(pre)
View(tb)
View(Y)
rm(list=ls(all=TRUE)) ## clear memeory; be cautious!
## load package and data
library(gsynth)
data(gsynth)
## run the algorithm
system.time(
out <- gsynth(Y ~ D + X1 + X2, data = simdata,
index=c("id","time"), inference="parametric",
se = TRUE, nboots = 1000, r = c(0, 5), CV = TRUE,
force = "two-way", parallel = TRUE, cores = 4)
)
## save the results
Y<-out$Y.dat
View(Y)
View(Y)
tb<-out$est.att
View(Y)
View(tb)
Yb<-out$Y.bar[,1:2] ## treated average and counterfactual average
View(Yb)
View(Yb)
tr<-out$tr
pre<-out$pre
T<-out$T
T0<-out$T0
p<-out$p
p
m<-out$m
Ntr<-out$Ntr
F.hat<-out$factor
L.tr<-out$lambda.tr # factor loading for treated units
View(L.tr)
time<-out$time
time.bf<-time[unique(T0)]
show <- 1:30
pdf("sim_att.pdf",width=10,height=7)
true.effect<-matrix(simdata$eff,30,50)[,1:5] # pivot the treatment effect
View(true.effect)
par(mfcol=c(2,1),mar=c(2,3,1,1),lend=1) # 2 plots togehter
for (j in which(tr==0)) lines(time[show],Y[show,j], col="#AAAAAA30")
for (j in which(tr==1)) {lines(time[show],Y[show,j],col="gray60",lwd=0.8)}
lines(time[show],Yb[show,2],col="gray20",lty=5,lwd=2.5)
lines(time[show],Yb[show,1],col=1,lty=1,lwd=2.5)
abline(v=time.bf,col="gray50",lty=1,lwd=1)
legend("topleft",legend=c("Treated Average",
"Estimated Y(0) Average for the Treated",
"Treated",
"Control"),
cex=1.3, seg.len=2, col=c("1","gray20","gray60","#AAAAAA60"),
fill=NA,border=NA, lty=c(1,5,1,1), lwd=c(2.5,2.5,2,2), merge=T,bty="n")
## gap plot
par(lend=1)
plot(time[show],tb[show,1],type="n",ylim=c(-2.2,12),main="",ylab="",xlab="")
polygon(c(rev(time[show]),
time[show]),
c(rev(tb[show,4]), tb[show,3]), col = '#80808050', border = NA)
abline(h=0,col="gray50",lty=1)
abline(v=time.bf,col="gray50",lty=1,lwd=1)
lines(time[show],tb[show,1],lwd=2)
lines(1:T,rowMeans(true.effect),col="gray20",lty=5,lwd=2.5)
legend("topleft",
legend=c("Estimated ATT","True ATT","95% Confidence Intervals"),
seg.len=2, cex=1.3, col=c(1,"gray20","#80808050"),
lty=c(1,5, 1),lwd=c(2.5,2.5,15), bty="n",border=NA)
graphics.off()
rm(list=ls(all=TRUE)) ## clear memeory; be cautious!
## load package and data
library(gsynth)
data(gsynth)
require(parallel)
require(foreach)
require(ggplot2)
require(GGally)
## run the algorithm
system.time(
out <- gsynth(Y ~ D + X1 + X2, data = simdata,
index=c("id","time"), inference="parametric",
se = TRUE, nboots = 1000, r = c(0, 5), CV = TRUE,
force = "two-way", parallel = TRUE, cores = 4)
)
## save the results
Y<-out$Y.dat
tb<-out$est.att
Yb<-out$Y.bar[,1:2] ## treated average and counterfactual average
tr<-out$tr # treated units
pre<-out$pre # period indicator
T<-out$T # time period
T0<-out$T0 # period pre-treatment
p<-out$p
m<-out$m
Ntr<-out$Ntr
F.hat<-out$factor # estimated factor
L.tr<-out$lambda.tr # factor loading for treated units
L.co<-out$lambda.co # factor loadings for control units
time<-out$time # time periods
time.bf<-time[unique(T0)] # number of time periods
show <- 1:30
pdf("sim_att.pdf",width=10,height=7)
true.effect<-matrix(simdata$eff,30,50)[,1:5] # pivot the treatment effect
par(mfcol=c(2,1),mar=c(2,3,1,1),lend=1) # 2 plots togehter
# raw plot
plot(time[show],Yb[show,1],type="n",ylim=c(-10, 50),main="",ylab="",xlab="")
for (j in which(tr==0)) lines(time[show],Y[show,j], col="#AAAAAA30")
for (j in which(tr==1)) {lines(time[show],Y[show,j],col="gray60",lwd=0.8)}
lines(time[show],Yb[show,2],col="gray20",lty=5,lwd=2.5)
lines(time[show],Yb[show,1],col=1,lty=1,lwd=2.5)
abline(v=time.bf,col="gray50",lty=1,lwd=1)
legend("topleft",legend=c("Treated Average",
"Estimated Y(0) Average for the Treated",
"Treated",
"Control"),
cex=1.3, seg.len=2, col=c("1","gray20","gray60","#AAAAAA60"),
fill=NA,border=NA, lty=c(1,5,1,1), lwd=c(2.5,2.5,2,2), merge=T,bty="n")
## gap plot
par(lend=1)
plot(time[show],tb[show,1],type="n",ylim=c(-2.2,12),main="",ylab="",xlab="")
polygon(c(rev(time[show]),
time[show]),
c(rev(tb[show,4]), tb[show,3]), col = '#80808050', border = NA)
abline(h=0,col="gray50",lty=1)
abline(v=time.bf,col="gray50",lty=1,lwd=1)
lines(time[show],tb[show,1],lwd=2)
lines(1:T,rowMeans(true.effect),col="gray20",lty=5,lwd=2.5)
legend("topleft",
legend=c("Estimated ATT","True ATT","95% Confidence Intervals"),
seg.len=2, cex=1.3, col=c(1,"gray20","#80808050"),
lty=c(1,5, 1),lwd=c(2.5,2.5,15), bty="n",border=NA)
graphics.off()
